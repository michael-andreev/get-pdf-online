@using Microsoft.AspNetCore.Mvc.Localization

@model PrecizeSoft.GetPdfOnline.Web.MvcCoreApp.Models.Statistics

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Statistics"];
}
<h2>@ViewData["Title"]</h2>

<div class="row">
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer["Summary"]</h3>
            </div>
            <ul class="list-group">
                <li class="list-group-item">
                    @Localizer["Total queries count:"] @Model.Summary.TotalCount <small class="text-muted">(@Localizer["{0} Good",Model.Summary.PositiveResultCount], @Localizer["{0} Bad", Model.Summary.NegativeResultCount])</small>
                </li>
                <li class="list-group-item">
                    @Localizer["First request:"] @(Model.Summary.FirstRequestDateUtc.HasValue ? Model.Summary.FirstRequestDateUtc.Value.ToLocalTime().ToString() : "-")
                </li>
                <li class="list-group-item">
                    @Localizer["Last request:"] @(Model.Summary.LastRequestDateUtc.HasValue ? Model.Summary.LastRequestDateUtc.Value.ToLocalTime().ToString() : " - ")
                </li>
                <li class="list-group-item">
                    @Localizer["Average query duration (sec):"] @Math.Round(Model.Summary.DurationInSecondsAvg, 2) <small class="text-muted">(@Localizer["Min"] @Math.Round(Model.Summary.DurationInSecondsMin, 2), @Localizer["Max"] @Math.Round(Model.Summary.DurationInSecondsMax, 2))</small>
                </li>
                <li class="list-group-item">
                    @Localizer["Average input file size (Kb):"] @Math.Round((double)Model.Summary.FileSizeAvg / 1024, 2) <small class="text-muted">(@Localizer["Min"] @Math.Round((double)Model.Summary.FileSizeMin / 1024, 2), @Localizer["Max"] @Math.Round((double)Model.Summary.FileSizeMax / 1024, 2))</small>
                </li>
                <li class="list-group-item">
                    @Localizer["Average output file size (Kb):"] @Math.Round((double)Model.Summary.ResultFileSizeAvg / 1024, 2) <small class="text-muted">(@Localizer["Min"] @Math.Round((double)Model.Summary.ResultFileSizeMin / 1024, 2), @Localizer["Max"] @Math.Round((double)Model.Summary.ResultFileSizeMax / 1024, 2))</small>
                </li>
                <li class="list-group-item">
                    @Localizer["Total traffic (Kb):"] @Math.Round((double)Model.Summary.TotalFileSizeSum / 1024, 2) <small class="text-muted">(@Localizer["Input"] @Math.Round((double)Model.Summary.FileSizeSum / 1024, 2), @Localizer["Output"] @Math.Round((double)Model.Summary.ResultFileSizeSum / 1024, 2))</small>
                </li>
            </ul>
        </div>
    </div>

    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer["File types"]</h3>
            </div>
            <ul class="list-group">
                @foreach (var p in Model.StatByFileCategories)
                {
                    <li class="list-group-item">@p.FileCategoryCode: @p.TotalCount</li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer["Daily stat"]</h3>
            </div>
            <ul class="list-group">
                @foreach (var p in Model.DailyStat)
                {
                    <li class="list-group-item">@p.Hour:00-@(p.Hour + 1):00: @p.TotalCount</li>
                }
            </ul>
        </div>
    </div>
</div>