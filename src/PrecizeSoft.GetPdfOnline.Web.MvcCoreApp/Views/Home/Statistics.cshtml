@model PrecizeSoft.GetPdfOnline.Web.MvcCoreApp.Models.Statistics
@{
    ViewData["Title"] = "Statistics";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<div class="row">
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Summary</h3>
            </div>
            <ul class="list-group">
                <li class="list-group-item">
                    Total queries count: @Model.Summary.TotalCount <small class="text-muted">(@Model.Summary.PositiveResultCount Good, @Model.Summary.NegativeResultCount Bad)</small>
                </li>
                <li class="list-group-item">
                    First request: @(Model.Summary.FirstRequestDateUtc.HasValue ? Model.Summary.FirstRequestDateUtc.Value.ToLocalTime().ToString() : "-")
                </li>
                <li class="list-group-item">
                    Last request: @(Model.Summary.LastRequestDateUtc.HasValue ? Model.Summary.LastRequestDateUtc.Value.ToLocalTime().ToString() : "-")
                </li>
                <li class="list-group-item">
                    Average query duration (sec): @Math.Round(Model.Summary.DurationInSecondsAvg, 2) <small class="text-muted">(Min @Math.Round(Model.Summary.DurationInSecondsMin, 2), Max @Math.Round(Model.Summary.DurationInSecondsMax, 2))</small>
                </li>
                <li class="list-group-item">
                    Average input file size (Kb): @Math.Round((double)Model.Summary.FileSizeAvg / 1024, 2) <small class="text-muted">(Min @Math.Round((double)Model.Summary.FileSizeMin / 1024, 2), Max @Math.Round((double)Model.Summary.FileSizeMax / 1024, 2))</small>
                </li>
                <li class="list-group-item">
                    Average output file size (Kb): @Math.Round((double)Model.Summary.ResultFileSizeAvg / 1024, 2) <small class="text-muted">(Min @Math.Round((double)Model.Summary.ResultFileSizeMin / 1024, 2), Max @Math.Round((double)Model.Summary.ResultFileSizeMax / 1024, 2))</small>
                </li>
                <li class="list-group-item">
                    Total traffic (Kb): @Math.Round((double)Model.Summary.TotalFileSizeSum / 1024, 2) <small class="text-muted">(Input @Math.Round((double)Model.Summary.FileSizeSum / 1024, 2), Output: @Math.Round((double)Model.Summary.ResultFileSizeSum / 1024, 2))</small>
                </li>
            </ul>
        </div>
    </div>

    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">File types</h3>
            </div>
            <ul class="list-group">
                @foreach (var p in Model.StatByFileCategories)
                {
                    <li class="list-group-item">@p.FileCategoryCode: @p.TotalCount</li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Daily stat</h3>
            </div>
            <ul class="list-group">
                @foreach (var p in Model.DailyStat)
                {
                    <li class="list-group-item">@p.Hour:00-@(p.Hour + 1):00: @p.TotalCount</li>
                }
            </ul>
        </div>
    </div>
</div>